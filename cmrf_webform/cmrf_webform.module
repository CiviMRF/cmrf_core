<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\cmrf_webform\WebformOptionsManager;
use Drupal\cmrf_webform\Entity\OptionSet;
use Drupal\cmrf_webform\Entity\Submission;
use Drupal\webform\WebformSubmissionInterface;
use Drupal\webform\WebformInterface;
use Drupal\Core\Entity\EntityFormInterface;
use Drupal\cmrf_webform\Exception\QueueException;
use Drupal\cmrf_webform\Exception\SubmissionException;

/**
 * Implements hook_webform_options_alter.
 */
function cmrf_webform_webform_options_alter(array &$options, array &$element, $options_id = NULL) {
  if ($options_id !== NULL && substr($options_id, 0, 5) == 'cmrf_') {
    $id = substr($options_id, 5);
    $entity = OptionSet::load($id);
    if ($entity === NULL) {
      Drupal::logger('cmrf_webform')->alert('CiviMRF Webform OptionSet entity %id was not found', [
        '%id' => $id,
      ]);
    }
    else {
      $service = Drupal::service('cmrf_webform.options_manager');
      try {
        if ($service->update($entity)) {
          $option_set = $service->getConfigurationObject($entity, false);
          $options = $option_set->getOptions();
        }
      }
      catch (RuntimeException $e) {
        Drupal::logger('cmrf_webform')->warning('CiviMRF Webform update procedure was unsuccessful: %msg', [
          '%msg' => $e->getMessage()
        ]);
      }
    }
  }
}

/**
 * Implements hook_entity_insert.
 */
function cmrf_webform_webform_submission_insert(WebformSubmissionInterface $entity) {
  $service = Drupal::service('cmrf_webform.submissions_manager');
  try {
    $service->executeSubmissionHandlers($entity);
  }
  catch (SubmissionException $e) {
    Drupal::logger('cmrf_webform')->alert('CiviMRF Webform Submission error: %msg', [
      '%msg' => $e->getMessage()
    ]);
  }
  catch (QueueException $e) {
    Drupal::logger('cmrf_webform')->alert('CiviMRF Webform Submission queueing error: %msg', [
      '%msg' => $e->getMessage()
    ]);
  }
}

/**
 * Implements hook_webform_cron.
 */
function cmrf_webform_cron() {
  $service = Drupal::service('cmrf_webform.submissions_manager');
  try {
    $count = $service->executeQueuedSubmissionHandlers();
  }
  catch (SubmissionException $e) {
    Drupal::logger('cmrf_webform')->alert('CiviMRF Webform Submission error: %msg', [
      '%msg' => $e->getMessage()
    ]);
  }
  catch (QueueException $e) {
    Drupal::logger('cmrf_webform')->alert('CiviMRF Webform Submission queueing error: %msg', [
      '%msg' => $e->getMessage()
    ]);
  }
}

/**
 * Implements hook_entity_delete.
 */
function cmrf_webform_webform_delete(WebformInterface $entity) {
  $service = Drupal::service('cmrf_webform.submissions_manager');
  $service->deleteWebformHandler($entity);
  $service = Drupal::service('cmrf_webform.defaults_manager');
  $service->deleteWebformHandler($entity);
}

/**
 * Implements hook_form_alter.
 */
function cmrf_webform_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $webform = $form_state->getFormObject();
  if ($webform instanceof EntityFormInterface) {
    $service = \Drupal::service('cmrf_webform.defaults_manager');
    $entity = $webform->getEntity();

    if ($entity instanceof WebformSubmissionInterface) {
      $parameters = Drupal::request()->query;

      try {
        if ($defaults = $service->fetch($entity, $parameters)) {
          foreach ($defaults as $key => $value) {
            findFieldKey($form['elements'], $key, $value);
          }
        }
      }
      catch (RuntimeException $e) {
        Drupal::logger('cmrf_webform')->warning("Couldn't fetch default data for form $form_id");
      }
    }
  }
}

  /**
   * Find element in which should be pre-filled and dp the pre-filling
   * We loop, because if fieldset or flexbox used, the field key changes
   */
  function findFieldKey(&$elements, $default_key, $default_value) {
    foreach ($elements as $key => $value) {
      if (isset($elements[$default_key])) {
        if (in_array($elements[$default_key]['#type'], array('textfield', 'hidden'))) {
          $elements[$default_key]['#value'] = $default_value;
        } elseif (($elements[$default_key]['#type'] == 'select')) {
          $elements[$default_key]['#options'] = $default_value;
        }
      } elseif (!preg_match('/^#/', $key)) {
        if ($value['#type'] == 'fieldset' || $value['#type'] == 'container' || $value['#type'] == 'webform_flexbox') {
          findFieldKey($elements[$key], $default_key, $default_value);
        }
      }
    }
  }
