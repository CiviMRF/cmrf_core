<?php

$cmrf_webform_submissions_updated = array();

function cmrf_webform_get_connector_name($profile) {
  return 'cmrf_webform_connector:'.$profile;
}

function cmrf_webform_get_connector_id($profile=null) {
  $connector_name = 'cmrf_webform_connector';
  if (!empty($profile)) {
    $connector_name .= ':'.$profile;
  }

  $core = cmrf_core_get_core();
  $connector_id = variable_get($connector_name);
  if (empty($connector_id)) {
    $connector_id = $core->registerConnector($connector_name, $profile);
    variable_set($connector_name, $connector_id);
  }
  return $connector_id;
}

function cmrf_webform_send_call($entity, $action, $parameters, $options, $profile=null, $callbacks=array()) {
  $connector_id = cmrf_webform_get_connector_id($profile);
  $core = cmrf_core_get_core();
  $call = $core->createCall($connector_id, $entity, $action, $parameters, $options, $callbacks);
  $core->executeCall($call);
  return $call;
}

function cmrf_webform_queue_call($entity, $action, $parameters, $options, $profile=null, $callbacks=array()) {
  $connector_id = cmrf_webform_get_connector_id($profile);
  $core = cmrf_core_get_core();
  $call = $core->createCall($connector_id, $entity, $action, $parameters, $options, $callbacks);
  $call->setScheduledDate(new \DateTime());
  $core->queueCall($call);
  return $call;
}

/**
 * Implements hook_webform_submission_presave().
 */
function cmrf_webform_webform_submission_presave($node, &$submission) {
  global $cmrf_webform_submissions_updated;
  if ($submission->is_draft) {
    return;
  }
  // Only submit webforms when civimrf is enabled.
  if (!$node->cmrf_enable) {
    return;
  }
  $original_submissions = webform_get_submissions(array('nid' => $submission->nid, 'sid' => $submission->sid));
  if (isset($original_submissions[$submission->sid])) {
    $cmrf_webform_submissions_updated[$submission->sid] = $original_submissions[$submission->sid];
  }

}

/**
 * Implements hook_webform_submission_update().
 */
function cmrf_webform_webform_submission_update($node, $submission) {
  global $cmrf_webform_submissions_updated;
  if ($submission->is_draft) {
    return;
  }
  // Only submit webforms when civimrf is enabled.
  if (!$node->cmrf_enable) {
    return;
  }
  $sid = $submission->sid;
  if (!isset($cmrf_webform_submissions_updated[$sid])) {
    return;
  }
  if ($cmrf_webform_submissions_updated[$sid]->is_draft && !$submission->is_draft) {
    cmrf_webform_submit($node, $submission);
  }
}

function cmrf_webform_webform_submission_insert($node, $submission) {
  cmrf_webform_submit($node, $submission);
}

function cmrf_webform_clear_submission(\CMRF\Drupal\Call $call) {
  $metadata = $call->getMetadata();
  if (isset($metadata['sid']) && isset($metadata['nid'])) {
    $sid = $metadata['sid'];
    $nid = $metadata['nid'];
    $node = node_load($nid);
    $submission = webform_get_submission($nid, $sid);
    webform_submission_delete($node, $submission);
  }
}

/**
 * Helper function to submit a submission
 *
 * @param $node
 * @param $submission
 */
function cmrf_webform_submit($node, $submission) {
  // Do not pass draft webforms.
  if ($submission->is_draft) {
    return;
  }

  // Only submit webforms when civimrf is enabled.
  if (!$node->cmrf_enable) {
    return;
  }

  $profile = !empty($node->cmrf_profile) ? $node->cmrf_profile : null;

  // Build the parameters for the call
  $params = array();
  $data = $submission->data;
  $webform = $node->webform;
  foreach($webform['components'] as $index => $component) {
    if (isset($node->cmrf_parameters[$component['form_key']])) {
      // Check whether to submit the component value and as which param name.
      $param_name = $node->cmrf_parameters[$component['form_key']];
      $submit = $param_name != -1;
    }
    else {
      // Default behavior, when no parameter mapping is provided.
      $param_name = $component['form_key'];
      $submit = TRUE;
    }
    if ($submit && isset($data[$index])) {
      $value = $data[$index];
      if (is_array($value) && empty($component['extra']['multiple'])) {
        $value = reset($value);
      }
      $params[$param_name] = $value;
    }
  }
  drupal_alter('cmrf_webform_submit_params', $params, $node, $submission);

  $options = array(
    'nid' => $submission->nid,
    'sid' => $submission->sid,
  );
  $callbacks = array();
  if ($node->cmrf_clear_submission) {
    $callbacks[] = 'cmrf_webform_clear_submission';
  }

  if ($node->cmrf_queue) {
    cmrf_webform_queue_call($node->cmrf_entity, $node->cmrf_action, $params, $options, $profile, $callbacks);
  } else {
    cmrf_webform_send_call($node->cmrf_entity, $node->cmrf_action, $params, $options, $profile, $callbacks);
  }
}

/**
 * Implements hook_permission().
 */
function cmrf_webform_permission() {
  return array(
    'administer webform cmrf' => array(
      'title' => t('Administer CiviMRF in Webforms'),
    )
  );
}

function cmrf_webform_menu() {
  $items['node/%webform_menu/webform/civimrf'] = array(
    'title' => 'CiviMRF',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cmrf_webform_settings', 1),
    'access arguments' => array('administer webform cmrf'),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/civimrf/webform'] = array(
    'title' => 'CiviMRF Webform settings',
    'description' => 'Administer CiviMRF Webform integration.',
    'position' => 'left',
    'weight' => 10,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/civimrf/webform/select_options'] = array(
    'title' => 'Select option sets',
    'description' => 'Add or edit select option sets to use as pre-built lists of options for Webform select components',
    'page callback' => 'cmrf_webform_select_options_list',
    'access arguments' => array('administer cmrf'),
  );
  $items['admin/config/civimrf/webform/select_options/%/edit'] = array(
    'title' => 'Edit select options',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cmrf_webform_select_options_form', 5),
    'access arguments' => array('administer cmrf'),
  );
  $items['admin/config/civimrf/webform/select_options/%/delete'] = array(
    'title' => 'Delete select options',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cmrf_webform_select_options_delete_confirm', 5),
    'access arguments' => array('administer cmrf'),
  );
  $items['admin/config/civimrf/webform/select_options/add'] = array(
    'title' => 'Add select options',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cmrf_webform_select_options_form'),
    'access arguments' => array('administer cmrf'),
    'type' => MENU_LOCAL_ACTION,
  );
  return $items;
}

/**
 * Retrieves the CiviMRF Webform select option set identified by its name.
 *
 * @param $select_options_name
 *   The machine-readable name of the select option set.
 * @param int $profile_id
 *   The CiviMRF core profile ID. Defaults to 0, which means that the global
 *   definition of the select option set will be loaded.
 *
 * @return array | bool
 *   The select option set, or FALSE when it could not be found within the
 *   database.
 */
function _cmrf_webform_select_options_load($select_options_name, $profile_id = 0) {
  return db_select('cmrf_webform_select_option_sets', 'os')
    ->fields('os')
    ->condition('name', $select_options_name)
    ->condition('pid', $profile_id)
    ->execute()
    ->fetchAssoc();
}

/**
 * Retrieves CiviMRF Webform select option sets available for a given profile.
 *
 * @param int | NULL $profile_id
 *   The CiviMRF profile ID, or NULL to load all globally available select
 *   option sets.
 *
 * @return array
 *   The CiviMRF Webform select options available for the given profile, keyed
 *   by their machine-readable name.
 */
function _cmrf_webform_select_options_load_all($profile_id = 0) {
  $query = db_select('cmrf_webform_select_option_sets', 'os')
    ->fields('os');
  if (isset($profile_id)) {
    $condition = db_or()
      ->condition('pid', $profile_id)
      ->condition('pid', 0);
    $query->condition($condition);
  }
  else {
    $query->isNull('pid');
  }
  $result = $query
    ->execute()
    ->fetchAllAssoc('name', PDO::FETCH_ASSOC);

  return $result;
}

/**
 * Implements hook_webform_select_options_info().
 */
function cmrf_webform_webform_select_options_info() {
  $items = array();

  foreach (_cmrf_webform_select_options_load_all() as $select_options) {
    $items[$select_options['name']] = array(
      'title' => $select_options['title'],
      'options callback' => '_cmrf_webform_select_options_callback',
      'options arguments' => $select_options,
    );
  }

  return $items;
}

/**
 * Options callback for Webform select option sets. Retrieves select options for
 * CiviCRM entities via "get" API calls, as defined within the profile used.
 *
 * @see callback_webform_options().
 *
 * @param $component
 * @param $flat
 * @param $arguments
 *   An array defining the API call for retrieving the select options. Contains
 *   the following elements:
 *   - "pid": The CMRF profile ID which the API call is defined in.
 *   - "entity": The CiviCRM entity against which to query a "get" action.
 *   - "parameters": JSON-formatted parameters to send to the CiviCRM API.
 *   - "name": The machine-readable name for this set of select options.
 *   - "title": The human-readable title for this set of select options.
 *   - "cache": An indicator for the minimum time these options should be kept
 *     in cache. @see cache_set() for more information.
 *
 * @return array
 */
function _cmrf_webform_select_options_callback($component, $flat, $arguments) {
  // Check whether the profile overrides the global definition.
  // TODO: $components does not include the nid when called via Ajax.
  // In that case, the default profile and the default definition of the select
  // options will be used.
  $node = node_load($component['nid']);
  $profile = cmrf_core_profile_load($node->cmrf_profile);
  $options = array(
    'limit' => 0, // Receive all options.
  );
  if ($node && $profile) {
    if ($override = _cmrf_webform_select_options_load($arguments['name'], $profile['pid'])) {
      $arguments = $override;
    }
  }
  $arguments['parameters'] = (array) json_decode($arguments['parameters'], TRUE);

  // Add current language to API parameters.
  global $language;
  $arguments['parameters']['_cmrf_language'] = $language->language;

  if (empty($arguments['cache'])) {
    $options['cache'] = $arguments['cache'];
  }

  if (!$profile && !$profile = cmrf_core_profile_load($arguments['pid'])) {
    $profile = cmrf_core_default_profile();
  }

  $select_options = array();
  $result = cmrf_webform_send_call(
    $arguments['entity'],
    $arguments['action'],
    $arguments['parameters'],
    $options,
    $profile['name']
  );
  if ($result->getStatus() == \CMRF\Drupal\Call::STATUS_DONE) {
    foreach ($result->getValues() as $entity) {
      $select_options[$entity[$arguments['option_value']]] = $entity[$arguments['option_label']];
    }
  }
  else {
    $reply = $result->getReply();
    watchdog(
      'cmrf_webform',
      'Error retrieving select options for component <em>@component</em> on webform <em>@webform</em> with select option set <em>@select_option_set</em>. The error message returned was: <pre>@api_error</pre>',
      array(
        '@component' => $component['name'],
        '@webform' => $node->title,
        '@select_option_set' => $arguments['title'],
        '@api_error' => $reply['error_message'],
      ),
      WATCHDOG_ERROR
    );
  }

  return $select_options;
}

/**
 * Builds a list of all CiviMRF Webform select option sets.
 */
function cmrf_webform_select_options_list() {
  $rows = array();
  foreach (_cmrf_webform_select_options_load_all() as $select_options) {
    $rows[] = array(
      $select_options['title'],
      l(t('Edit'), 'admin/config/civimrf/webform/select_options/' . $select_options['name'] . '/edit'),
      l(t('Delete'), 'admin/config/civimrf/webform/select_options/' . $select_options['name'] . '/delete'),
    );
  }

  return array(
    '#theme' => 'table',
    '#header' => array(t('Title'), array('data' => t('Operations'), 'colspan' => 2)),
    '#rows' => $rows,
    '#empty' => t('There are no select option sets defined.'),
    '#prefix' => '<p>' . t('Select option sets may be overwritten per CiviMRF core profile within the respective profile\'s configuration form.') . '</p>',
  );
}

/**
 * Builds form elements for select option sets to be used by form builders for
 * select option sets forms.
 *
 * @param $form
 * @param $form_state
 * @param string | NULL $select_options_name
 *   The machine-readable name of the select option set to use as source for
 *   default values, or NULL to not provide default values.
 * @param int $profile_id
 *   The CiviMRF core profile ID to use as source for default values. Defaults
 *   to 0 to use the global definition of the select options set.
 *
 * @return mixed
 */
function _cmrf_webform_select_options_form_elements($form, &$form_state, $select_options_name = NULL, $profile_id = 0) {
  if (isset($select_options_name)) {
    if (!$select_options = _cmrf_webform_select_options_load($select_options_name, $profile_id)) {
      $form_state['cmrf_webform_select_options_global'] = TRUE;
      $select_options = _cmrf_webform_select_options_load($select_options_name);
    }
    $form['#select_options'] = $select_options;
  }

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#required' => TRUE,
    '#default_value' => (isset($select_options['title']) ? $select_options['title'] : NULL),
  );
  $form['name'] = array(
    '#type' => 'machine_name',
    '#title' => t('Name'),
    '#machine_name' => array(
      'exists' => '_cmrf_webform_select_options_exists',
      'source' => array('title'),
    ),
    '#disabled' => isset($select_options_name),
    '#default_value' => (isset($select_options['name']) ? $select_options['name'] : NULL),
  );
  $form['entity'] = array(
    '#type' => 'textfield',
    '#title' => t('Entity'),
    '#required' => TRUE,
    '#default_value' => (isset($select_options['entity']) ? $select_options['entity'] : 'OptionValue'),
  );
  $form['action'] = array(
    '#type' => 'textfield',
    '#title' => t('Action'),
    '#required' => TRUE,
    '#default_value' => (isset($select_options['action']) ? $select_options['action'] : 'get'),
  );
  $default_parameters = array(
    '{',
    '  "is_active": 1,',
    '  "option_group_id": "FOO",',
    '  "return": "value,label"',
    '}',
  );
  $form['parameters'] = array(
    '#type' => 'textarea',
    '#title' => t('Parameters'),
    '#description' => t('JSON-formatted object with API parameters for the entity and action entered above.'),
    '#default_value' => (isset($select_options['parameters']) ? $select_options['parameters'] : html_entity_decode(implode('&#13;&#10;', $default_parameters))),
    '#attributes' => array(
      'class' => array('preformatted'),
    ),
  );
  $form['#attached']['css'][] = drupal_get_path('module', 'cmrf_webform') . '/css/cmrf_webform.css';
  $form['option_value'] = array(
    '#type' => 'textfield',
    '#title' => t('Key property'),
    '#description' => t('A property of the queried entity to use as the key for the dedicated select option.'),
    '#required' => TRUE,
    '#default_value' =>(isset($select_options['option_value']) ? $select_options['option_value'] : 'value'),
  );
  $form['option_label'] = array(
    '#type' => 'textfield',
    '#title' => t('Value property'),
    '#description' => t('A property of the queried entity to use as the content (i.e. the label/value) for the dedicated select option.'),
    '#required' => TRUE,
    '#default_value' =>(isset($select_options['option_label']) ? $select_options['option_label'] : 'label'),
  );
  $form['cache'] = array(
    '#type' => 'textfield',
    '#title' => t('Cache'),
    '#description' => t(
      'A relative date/time format that the PHP <a href="http://php.net/manual/de/datetime.formats.relative.php" target="_blank">datetime parser</a> understands, e.g. <code>1 week</code>. Defaults to <code>0</code> (no caching).'
    ),
    '#default_value' => (isset($select_options['cache']) ? $select_options['cache'] : 0),
  );

  return $form;
}

/**
 * Builds the form for CiviMRF Webform select option sets.
 *
 * @param $form
 * @param $form_state
 * @param string | NULL $select_options_name
 *   The machine-readable name of the select option set.
 *
 * @return array
 */
function cmrf_webform_select_options_form($form, &$form_state, $select_options_name = NULL) {
  $form = _cmrf_webform_select_options_form_elements($form, $form_state, $select_options_name);

  $form['actions'] = array(
    '#type' => 'actions',
  );
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#validate' => array('cmrf_webform_select_options_form_validate')
  );
  if (isset($select_options_name)) {
    $form['actions']['delete'] = array(
      '#type' => 'submit',
      '#value' => t('Delete'),
      '#submit' => array('cmrf_webform_select_options_form_delete_submit'),
    );
  }

  return $form;
}

/**
 * Form validation handler for @see cmrf_webform_select_options_form().
 *
 * @param $form
 * @param $form_state
 */
function cmrf_webform_select_options_form_validate($form, &$form_state) {
  // Validate JSON for "parameters".
  if (!empty($form_state['values']['parameters']) && json_decode($form_state['values']['parameters'], TRUE) === NULL) {
    form_error(
      $form['parameters'],
      t('The input for <em>parameters</em> is no valid JSON.')
    );
  }

  // Validate cache settings.
  if (empty($form_state['values']['cache'])) {
    form_set_value($form['cache'],0, $form_state);
  }
  elseif (strtotime($form_state['values']['cache']) === FALSE) {
    form_error($form['cache'], t('The input for <em>Cache</em> is not a valid date/time format.'));
  }
}

/**
 * Form submission handler for @see cmrf_webform_select_options_form().
 *
 * Handles the 'Delete' button on the select options form.
 *
 * @param $form
 * @param $form_state
 */
function cmrf_webform_select_options_form_delete_submit($form, &$form_state) {
  $destination = array();
  if (isset($_GET['destination'])) {
    $destination = drupal_get_destination();
    unset($_GET['destination']);
  }
  $select_options = $form['#select_options'];
  $form_state['redirect'] = array(
    'admin/config/civimrf/webform/select_options/' . $select_options['name'] . '/delete',
    array('query' => $destination),
  );
}

/**
 * Builds the CiviMRF Webform select options deletion confirmation form.
 *
 * @param $form
 * @param $form_state
 * @param string | NULL $select_options_name
 *   The machine-readable name of the select option set.
 *
 * @return mixed
 */
function cmrf_webform_select_options_delete_confirm($form, &$form_state, $select_options_name) {
  $select_options = _cmrf_webform_select_options_load($select_options_name);
  $form['#select_options'] = $select_options;
  // Always provide entity id in the same form key as in the entity edit form.
  $form['name'] = array('#type' => 'value', '#value' => $select_options['name']);
  return confirm_form(
    $form,
    t('Are you sure you want to delete the select options <em>@select_options_title</em>', array(
      '@select_options_title' => $select_options['title'],
    )),
    'admin/config/civimrf/webform/select_options/' . $select_options['name'] . '/edit',
    t('This action can not be undone.'),
    t('Delete')
  );
}

/**
 * Executes select options deletion.
 *
 * @param $form
 * @param $form_state
 */
function cmrf_webform_select_options_delete_confirm_submit($form, &$form_state) {
  if ($form_state['values']['confirm']) {
    $select_options = $form['#select_options'];
    db_delete('cmrf_webform_select_option_sets')
      ->condition('name', $select_options['name'])
      ->execute();
    drupal_set_message(t('Successfully deleted select options <em>@select_options_title</em>', array(
      '@select_options_title' => $select_options['title'],
    )));
  }

  $form_state['redirect'] = 'admin/config/civimrf/webform/select_options';
}

/**
 * Form submission handler for @see cmrf_webform_select_options_form().
 *
 * @param bool $clean
 *   Whether form state values need to be cleaned from Form API elements.
 *   Defaults to TRUE.
 *
 * @param $form
 * @param $form_state
 */
function cmrf_webform_select_options_form_submit($form, &$form_state, $clean = TRUE) {
  if ($clean) {
    form_state_values_clean($form_state);
  }
  $record = $form_state['values'] + array('pid' => 0);

  try {
    $status = db_merge('cmrf_webform_select_option_sets')
      ->key(array(
        'name' => $record['name'],
        'pid' => $record['pid'],
      ))
      ->fields($record)
      ->execute();
    if ($status == MergeQuery::STATUS_INSERT) {
      drupal_set_message(t('Successfully added select options <em>@select_options_title</em>.', array(
        '@select_options_title' => $record['title'],
      )));
    }
    elseif ($status == MergeQuery::STATUS_UPDATE) {
      drupal_set_message(t('Successfully updated select options <em>@select_options_title</em>.', array(
        '@select_options_title' => $record['title'],
      )));
    }
  }
  catch (Exception $exception) {
    drupal_set_message(t('Error saving select options.'), 'error');
  }

  $form_state['redirect'] = 'admin/config/civimrf/webform/select_options';
}

/**
 * machine_name element "exists" callback. Checks whether a machine name for a
 * set of select options is already taken.
 *
 * @param $value
 * @param $element
 * @param $form_state
 *
 * @return bool
 */
function _cmrf_webform_select_options_exists($value, $element, $form_state) {
  foreach (_cmrf_webform_select_options_load_all() as $select_options_name => $select_options) {
    if ($select_options['name'] == $value) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implements hook_webform_component_render_alter().
 */
function cmrf_webform_webform_component_render_alter(array &$element, array &$component) {
  // Retrieve this component's Webform node from static cache.
  $node = &drupal_static(__FUNCTION__ . '_node_' . $component['nid']);
  if (!isset($node)) {
    $node = node_load($component['nid']);
  }
  if (
    !empty($node->cmrf_enable)
    && !empty($node->cmrf_retrieve_default_values['enable'])
    && !empty($_GET['hash'])
  ) {
    // Retrieve default values for this component's Webform node.
    $default_values_call = _cmrf_webform_default_values_retrieve($node, $_GET['hash']);
    $default_values = $default_values_call->getStatus() == 'DONE' ? $default_values_call->getReply() : array();

    // Set the component's default value, if there is a match.
    if (isset($default_values[$component['form_key']])) {
      if ($component['type'] == 'hidden') {
        $element['#value'] = $default_values[$component['form_key']];
      }
      else {
        $element['#default_value'] = $default_values[$component['form_key']];
      }
    }
  }
}

/**
 * Retrieves default values for a given CiviCRM contact hash.
 *
 * @param \stdClass $node
 *
 * @param string $hash
 *
 * @return \CMRF\Core\Call
 */
function _cmrf_webform_default_values_retrieve(&$node, $hash) {
  $default_values_call = &drupal_static(__FUNCTION__ . '_' . $node->nid . '_' . $hash);
  if (!isset($default_values_call)) {
    $default_values_call = cmrf_webform_send_call(
      $node->cmrf_retrieve_default_values['entity'],
      $node->cmrf_retrieve_default_values['action'],
      json_decode($node->cmrf_retrieve_default_values['parameters'], TRUE)
      + array('hash' => $hash),
      json_decode($node->cmrf_retrieve_default_values['options'], TRUE),
      $node->cmrf_profile
    );
  }

  return $default_values_call;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function cmrf_webform_form_cmrf_core_profile_form_alter(&$form, &$form_state, $form_id) {
  $select_option_sets = _cmrf_webform_select_options_load_all();
  if (!empty($select_option_sets)) {
    if (!isset($form['module_settings'])) {
      $form['module_settings'] = array(
        '#type' => 'vertical_tabs',
      );
    }
    $form['cmrf_webform'] = array(
      '#type' => 'fieldset',
      '#title' => t('CiviMRF Webform'),
      '#group' => 'module_settings',
      '#tree' => TRUE,
    );
    $form['cmrf_webform']['select_options'] = array(
      '#type' => 'fieldset',
      '#title' => t('Select options'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    foreach ($select_option_sets as $select_options) {
      $form['cmrf_webform']['select_options'][$select_options['name']] = array(
        '#type' => 'fieldset',
        '#title' => $select_options['title'],
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );
      $form['cmrf_webform']['select_options'][$select_options['name']]['override'] = array(
        '#type' => 'checkbox',
        '#title' => t('Override global definition'),
      );
      $form['cmrf_webform']['select_options'][$select_options['name']]['definition'] = array(
        '#type' => 'container',
        '#states' => array(
          'visible' => array(
            ':input[name="cmrf_webform[select_options][' . $select_options['name'] . '][override]"]' => array('checked' => TRUE),
          ),
        ),
      );
      $form['cmrf_webform']['select_options'][$select_options['name']]['definition'] = _cmrf_webform_select_options_form_elements(
        $form['cmrf_webform']['select_options'][$select_options['name']]['definition'],
        $form_state, $select_options['name'],
        $form_state['profile']['pid']
      );

      $form['cmrf_webform']['select_options'][$select_options['name']]['override']['#default_value'] = (int) empty($form_state['cmrf_webform_select_options_global']);

      $form['cmrf_webform']['select_options'][$select_options['name']]['definition']['pid'] = array(
        '#type' => 'value',
        '#value' => $form_state['profile']['pid'],
      );
    }

    $form['#submit'][] = '_cmrf_webform_cmrf_core_profile_form_submit';
  }
}

/**
 * Implements hook_cmrf_core_profile_delete().
 */
function cmrf_webform_cmrf_core_profile_delete($profile) {
  db_delete('cmrf_webform_select_option_sets')
    ->condition('pid', $profile['pid'])
    ->execute();
}

/**
 * Form submission handler for @see cmrf_core_profile_form() added within
 * @see cmrf_webform_form_cmrf_core_profile_form_alter().
 *
 * @param $form
 * @param $form_state
 */
function _cmrf_webform_cmrf_core_profile_form_submit($form, &$form_state) {
  foreach ($form_state['values']['cmrf_webform']['select_options'] as $select_options_name => $select_options_values) {
    if (!empty($select_options_values['override'])) {
      $select_options_form_state = array('values' => $select_options_values['definition']);
      cmrf_webform_select_options_form_submit(
        $form['cmrf_webform']['select_options'][$select_options_name],
        $select_options_form_state,
        FALSE
      );
    }
    else {
      db_delete('cmrf_webform_select_option_sets')
        ->condition('name', $select_options_values['definition']['name'])
        ->condition('pid', $select_options_values['definition']['pid'])
        ->execute();
      drupal_set_message(t('Successfully deleted overriden select options <em>@select_options_title</em>', array(
        '@select_options_title' => $select_options_values['definition']['title'],
      )));
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function cmrf_webform_form_webform_components_form_alter(&$form, &$form_state) {
  $node = $form['#node'];
  if (isset($node->cmrf_enable) && $node->cmrf_enable) {
    $profiles = cmrf_core_list_profiles();
    $profile = t('Default');
    if (!empty($node->cmrf_profile) && isset($profiles[$node->cmrf_profile])) {
      $profile = $profiles[$node->cmrf_profile]['label'];
    }
    $form['warning']['civimrf'] = array(
      '#markup' => '<p class="civimrf-description"><span class="civimrf-icon enable"></span>' . t('CiviMRF is enabled and this webform will be submitted to CiviCRM with the %profile profile', array('%profile' => $profile)) . '</p>',
      '#weight' => -1000,
    );
    $form['#attached']['css'] = array(
      drupal_get_path('module', 'cmrf_webform') . '/css/cmrf_webform.css',
    );
  }
  return $form;
}

/**
 * Adds a checkbox to submit this webform through CiviMRF
 *
 * @param array $form
 *   The form.
 * @param array $form_state
 *   The form state.
 * @param $node
 *   The node.
 * @return array
 *   The form.
 */
function cmrf_webform_settings($form, &$form_state, $node) {
  $profiles = cmrf_core_list_profiles();
  $profiles_options = array('' => t(' - Default profile -'));
  foreach($profiles as $profile_name => $profile) {
    $profiles_options[$profile_name] = $profile['label'];
  }

  $enabled = isset($node->cmrf_enable) && $node->cmrf_enable ? TRUE : FALSE;
  $queue = isset($node->cmrf_queue) && $node->cmrf_queue ? TRUE : FALSE;
  $entity = isset($node->cmrf_entity) ? $node->cmrf_entity : '';
  $action = isset($node->cmrf_action) ? $node->cmrf_action : '';
  $parameter_mapping = isset($node->cmrf_parameters) ? $node->cmrf_parameters : array();
  $profile = isset($node->cmrf_profile) ? $node->cmrf_profile : '';
  $clear_submission = isset($node->cmrf_clear_submission) ? $node->cmrf_clear_submission : TRUE;
  $retrieve_default_values = isset($node->cmrf_retrieve_default_values) ? $node->cmrf_retrieve_default_values : array(
    'enable' => FALSE,
    'entity' => '',
    'action' => '',
    'parameters' => '',
    'options' => '',
    'invalid_hash_message' => NULL,
    'invalid_hash_redirect' => NULL,
  );

  $form['#node'] = $node;

  $form['cmrf_webform']['cmrf_enable'] = array(
    '#type' => 'select',
    '#title' => t('Submit with CiviMRF'),
    '#options' => array(
      '' => t('- do not submit -'),
      'cmrf_webform' => t('Submit to the CiviCRM API'),
    ),
    '#description' => t('Submit this webform with CiviMRF'),
    '#default_value' => $enabled ? 'cmrf_webform' : '',
  );
  $form['cmrf_webform']['cmrf_clear_submission'] = array(
    '#type' => 'checkbox',
    '#title' => t('Delete the submission after processing.'),
    '#description' => t('Deletes the submission form the webform results after the data has been submitted to CiviCRM.'),
    '#default_value' => $clear_submission,
    '#states' => array(
      'visible' => array(
        'select[name="cmrf_enable"]' => array('value' => 'cmrf_webform'),
      ),
    ),
  );
  $form['cmrf_webform']['cmrf_queue'] = array(
    '#type' => 'checkbox',
    '#title' => t('Handle the submission in the background'),
    '#description' => t('Submit this webform in the background. This means that the user does not have to wait till the submission is processed. You have to enable the cron to get this working.'),
    '#default_value' => $queue,
    '#states' => array(
      'visible' => array(
        'select[name="cmrf_enable"]' => array('value' => 'cmrf_webform'),
      ),
    ),
  );
  $form['cmrf_webform']['cmrf_profile'] = array(
    '#type' => 'select',
    '#title' => t('CiviMRF Connection profile'),
    '#options' => $profiles_options,
    '#default_value' => $profile,
    '#states' => array(
      'visible' => array(
        'select[name="cmrf_enable"]' => array('value' => 'cmrf_webform'),
      ),
    ),
  );
  $form['cmrf_webform']['cmrf_entity'] = array(
    '#type' => 'textfield',
    '#title' => t('Entity'),
    '#description' => t('CiviMRF works with submitting data to the CiviCRM API. This field specifies which entity to use.'),
    '#default_value' => $entity,
    '#states' => array(
      'visible' => array(
        'select[name="cmrf_enable"]' => array('value' => 'cmrf_webform'),
      ),
      'required' => array(
        'select[name="cmrf_enable"]' => array('value' => 'cmrf_webform'),
      ),
    ),
  );
  $form['cmrf_webform']['cmrf_action'] = array(
    '#type' => 'textfield',
    '#title' => t('Action'),
    '#description' => t('CiviMRF works with submitting data to the CiviCRM API. This field specifies which action to use.'),
    '#default_value' => $action,
    '#states' => array(
      'visible' => array(
        'select[name="cmrf_enable"]' => array('value' => 'cmrf_webform'),
      ),
      'required' => array(
        'select[name="cmrf_enable"]' => array('value' => 'cmrf_webform'),
      ),
    ),
  );

  // Provide a configurable mapping of Webform components to API parameters, and
  // the option to not submit specified parameters.
  $form['parameters'] = array(
    '#type' => 'fieldset',
    '#title' => t('Parameter mapping'),
    '#description' => t('You may change how each Webform component value is being submitted to the API, selecting whether to use the default form key, a custom parameter name or not submit the component value at all.'),
    '#tree' => TRUE,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  if (module_exists('select_or_other')) {
    foreach ($node->webform['components'] as $cid => $component) {
      $form['parameters'][$component['form_key']] = array(
        '#type' => 'select_or_other',
        '#select_type' => 'radios',
        '#title' => $component['name'],
        '#options' => array(
          -1 => t('Do not submit'),
          $component['form_key'] => t('Use default (<code>@default</code>)', array('@default' => $component['form_key'])),
        ),
        '#other' => t('Provide custom parameter name'),
        '#other_unknown_defaults' => 'other',
        '#other_delimiter' => ', ', // This is the select_or_other default.
        '#default_value' => isset($parameter_mapping[$component['form_key']]) ? $parameter_mapping[$component['form_key']] : $component['form_key'],
        '#required' => TRUE,
      );
    }
  }
  else {
    $form['parameters']['#description'] .= t(' <span class="error">The module <a href="https://drupal.org/project/select_or_other">Select (or other)</a> is needed for defining a parameter mapping.</span>');
  }

  // Form fields for the API action to use for retrieving default values for the
  // Webform's components.
  $form['retrieve_default_values'] = array(
    '#type' => 'fieldset',
    '#title' => t('Default values'),
    '#description' => t('You may define a CiviCRM API action to use for retrieving default values for components in this Webform. When this is enabled, and a CiviCRM contact hash is present as a URL query parameter <code>hash</code>, the default value for each component in this Webform with the name of an attribute in the API call response will be set to the retrieved value for this attribute.'),
    '#collapsible' => TRUE,
    '#collapsed' => !$retrieve_default_values['enable'],
    '#tree' => TRUE,
    '#attached' => array(
      'css' => array(
        drupal_get_path('module', 'cmrf_webform') . '/css/cmrf_webform.css',
      ),
    ),
    '#states' => array(
      'visible' => array(
        'select[name="cmrf_enable"]' => array(
          'value' => 'cmrf_webform',
        ),
      ),
    ),
  );
  $form['retrieve_default_values']['enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Retrieve default values'),
    '#description' => t('Retrieve default values using a CiviCRM API call with a contact hash.'),
    '#default_value' => $retrieve_default_values['enable'],
  );
  $form['retrieve_default_values']['entity'] = array(
    '#type' => 'textfield',
    '#title' => t('Entity'),
    '#description' => t('CiviCRM API entity'),
    '#default_value' => $retrieve_default_values['entity'] ? $retrieve_default_values['entity'] : 'Contact',
    '#states' => array(
      'visible' => array(
        'input[name="retrieve_default_values[enable]"]' => array(
          'checked' => TRUE,
        ),
      ),
      'required' => array(
        'input[name="retrieve_default_values[enable]"]' => array(
          'checked' => TRUE,
        ),
      ),
    ),
  );
  $form['retrieve_default_values']['action'] = array(
    '#type' => 'textfield',
    '#title' => t('Action'),
    '#description' => t('CiviCRM API action'),
    '#default_value' => $retrieve_default_values['action'] ? $retrieve_default_values['action'] : 'getsingle',
    '#states' => array(
      'visible' => array(
        'input[name="retrieve_default_values[enable]"]' => array(
          'checked' => TRUE,
        ),
      ),
      'required' => array(
        'input[name="retrieve_default_values[enable]"]' => array(
          'checked' => TRUE,
        ),
      ),
    ),
  );
  $form['retrieve_default_values']['parameters'] = array(
    '#type' => 'textarea',
    '#title' => t('Parameters'),
    '#description' => t('JSON-formatted CiviCRM API parameters. The parameter <code>hash</code> will be added automatically from the URL query parameter <code>hash</code>.'),
    '#default_value' => $retrieve_default_values['parameters'] ? $retrieve_default_values['parameters'] : '{}',
    '#states' => array(
      'visible' => array(
        'input[name="retrieve_default_values[enable]"]' => array(
          'checked' => TRUE,
        )
      ),
    ),
    '#attributes' => array(
      'class' => array('preformatted'),
    ),
  );
  $form['retrieve_default_values']['options'] = array(
    '#type' => 'textarea',
    '#title' => t('Options'),
    '#description' => t('JSON-formatted CiviCRM API options'),
    '#default_value' => $retrieve_default_values['options'] ? $retrieve_default_values['options'] : '{}',
    '#states' => array(
      'visible' => array(
        'input[name="retrieve_default_values[enable]"]' => array(
          'checked' => TRUE,
        )
      ),
    ),
    '#attributes' => array(
      'class' => array('preformatted'),
    ),
  );

  $form['retrieve_default_values']['invalid_hash'] = array(
    '#type' => 'fieldset',
    '#tree' => FALSE,
    '#title' => t('Invalid contact hashes'),
    '#description' => t('When the CiviCRM contact hash is invalid, a message can be displayed and/or the user can be redirected to another page (e.g. a webform for retrieving a new contact hash link). Contact hashes are considered invalid, if the API call specified above fails or returns an error.'),
  );
  $form['retrieve_default_values']['invalid_hash']['invalid_hash_message'] = array(
    '#type' => 'textfield',
    '#title' => t('Message for invalid hash parameter'),
    '#description' => t('Message to display when opening the Webform without or with an invalid hash parameter. Leave empty to not show a message for invalid hash parameters.'),
    '#default_value' => $retrieve_default_values['invalid_hash_message'] ? $retrieve_default_values['invalid_hash_message'] : NULL,
    '#parents' => array(
      'retrieve_default_values',
      'invalid_hash_message',
    ),
  );
  $form['retrieve_default_values']['invalid_hash']['invalid_hash_redirect'] = array(
    '#type' => 'textfield',
    '#title' => t('Redirect path for invalid hash parameter'),
    '#description' => t('Path to redirect to when opening the Webform without or with an invalid hash parameter. Leave empty to not redirect for invalid hash parameters.'),
    '#default_value' => $retrieve_default_values['invalid_hash_redirect'] ? $retrieve_default_values['invalid_hash_redirect'] : NULL,
    '#parents' => array(
      'retrieve_default_values',
      'invalid_hash_redirect',
    ),
  );

  $form['actions']['#type'] = 'actions';
  $form['actions']['submit']['#type'] = 'submit';
  $form['actions']['submit']['#value'] = t('Save');

  $form['#validate'][] = 'cmrf_webform_settings_validate';
  $form['#submit'][] = 'cmrf_webform_settings_submit';
  return $form;
}

/**
 * Validate the webform settings form.
 *
 * @param array $form
 *    The form.
 * @param array $form_state
 *    The form state.
 */
function cmrf_webform_settings_validate(array &$form, array &$form_state) {
  if ($form_state['values']['cmrf_enable'] == 'cmrf_webform') {
    if (empty($form_state['values']['cmrf_entity'])) {
      form_set_error('cmrf_entity', t('Entity is required.'));
    }
    if (empty($form_state['values']['cmrf_action'])) {
      form_set_error('cmrf_action', t('Action is required.'));
    }

    // If enabled to retrieve default values via the CiviCRM API, check entity,
    // action, parameters and options fields for valid values.
    if ($form_state['values']['retrieve_default_values']['enable']) {
      foreach (array('entity', 'action') as $required_element_name) {
        $required_element = $form['retrieve_default_values'][$required_element_name];
        if (empty($form_state['values']['retrieve_default_values'][$required_element_name])) {
          form_error(
            $required_element,
            t('!name field is required.', array('!name' => $required_element['#title']))
          );
        }
      }
      foreach (array('parameters', 'options') as $json_element_name) {
        if (json_decode($form_state['values']['retrieve_default_values'][$json_element_name], TRUE) === NULL) {
          form_error(
            $form['retrieve_default_values'][$json_element_name],
            t(
              'The input for !field is no valid JSON.',
              array('!field' => $form['retrieve_default_values'][$json_element_name]['#title'])
            )
          );
        }
      }

      // Validate redirect path, if set.
      if (
        !empty($form_state['values']['retrieve_default_values']['invalid_hash_redirect'])
        && !drupal_valid_path($form_state['values']['retrieve_default_values']['invalid_hash_redirect'])
      ) {
        form_error(
          $form['retrieve_default_values']['invalid_hash']['invalid_hash_redirect'],
          t('The redirect path entered is not valid.')
        );
      }
    }
  }
}

/**
 * Submit the webform settings form and store the civimrf settings.
 *
 * @param array $form
 *    The form.
 * @param array $form_state
 *    The form state.
 */
function cmrf_webform_settings_submit(array &$form, array &$form_state) {
  $node = &$form['#node'];
  $node->cmrf_enable = $form_state['values']['cmrf_enable'] == 'cmrf_webform' ? TRUE : FALSE;
  $node->cmrf_queue = $form_state['values']['cmrf_queue'] ? TRUE : FALSE;
  $node->cmrf_clear_submission = $form_state['values']['cmrf_clear_submission'] ? TRUE : FALSE;
  $node->cmrf_profile = $form_state['values']['cmrf_profile'] ? $form_state['values']['cmrf_profile'] : '';
  $node->cmrf_entity = $form_state['values']['cmrf_entity'] ? $form_state['values']['cmrf_entity'] : '';
  $node->cmrf_action = $form_state['values']['cmrf_action'] ? $form_state['values']['cmrf_action'] : '';
  $node->cmrf_parameters = !empty($form_state['values']['parameters']) ? $form_state['values']['parameters'] : array();
  $node->cmrf_retrieve_default_values = $form_state['values']['retrieve_default_values'] ? $form_state['values']['retrieve_default_values'] : '';
  node_save($node);

  if ($form_state['values']['cmrf_enable'] == 'cmrf_webform') {
    drupal_set_message(t('Webform %name CiviMRF enabled.', array('%name' => $node->title)));
  } elseif ($form_state['values']['cmrf_enable'] == '') {
    drupal_set_message(t('Webform %name CiviMRF disabled.', array('%name' => $node->title)));
  }
  $form_state['redirect'] = 'node/'.$node->nid.'/webform';
}

/**
 * Deferred hook_node_load for webforms.
 *
 * @param array $nodes
 *    Array of nodes.
 * @param array $types
 *    Array of types.
 */
function cmrf_webform_node_load($nodes, $types) {
  $db = db_query('SELECT * FROM {cmrf_webforms} WHERE nid IN(:nids)', array(':nids' => array_keys($nodes)));
  foreach ($db as $cmrf_webform) {
    $node = &$nodes[$cmrf_webform->nid];
    $node->cmrf_enable = $cmrf_webform->cmrf_enable ? TRUE : FALSE;
    $node->cmrf_queue = $cmrf_webform->cmrf_queue ? TRUE : FALSE;
    $node->cmrf_clear_submission = $cmrf_webform->cmrf_clear_submission ? TRUE : FALSE;
    $node->cmrf_profile = $cmrf_webform->cmrf_profile ? $cmrf_webform->cmrf_profile : '';
    $node->cmrf_entity = $cmrf_webform->cmrf_entity ? $cmrf_webform->cmrf_entity : '';
    $node->cmrf_action = $cmrf_webform->cmrf_action ? $cmrf_webform->cmrf_action : '';
    $node->cmrf_parameters = $cmrf_webform->cmrf_parameters ? unserialize($cmrf_webform->cmrf_parameters) : array();

    if ($cmrf_webform->cmrf_retrieve_default_values_enable) {
      $node->cmrf_retrieve_default_values = array(
        'enable' => $cmrf_webform->cmrf_retrieve_default_values_enable,
        'entity' => $cmrf_webform->cmrf_retrieve_default_values_entity,
        'action' => $cmrf_webform->cmrf_retrieve_default_values_action,
        'parameters' => $cmrf_webform->cmrf_retrieve_default_values_parameters,
        'options' => $cmrf_webform->cmrf_retrieve_default_values_options,
        'invalid_hash_message' => $cmrf_webform->cmrf_retrieve_default_values_invalid_hash_message,
        'invalid_hash_redirect' => $cmrf_webform->cmrf_retrieve_default_values_invalid_hash_redirect,
      );
    }
  }
}

/**
 * Implements hook_node_view().
 */
function cmrf_webform_node_view($node, $view_mode, $langcode) {
  if (
    !empty($node->cmrf_enable)
    && !empty($node->cmrf_retrieve_default_values['enable'])
  ) {
    if (!empty($_GET['hash'])) {
      $default_values_call = _cmrf_webform_default_values_retrieve($node, $_GET['hash']);
      $reply = $default_values_call->getReply();
      $hash_valid = ($default_values_call->getStatus() == 'DONE' && empty($reply['is_error']));
    }
    else {
      $hash_valid = FALSE;
    }
    if (!$hash_valid) {
      if (!empty($node->cmrf_retrieve_default_values['invalid_hash_message'])) {
        drupal_set_message($node->cmrf_retrieve_default_values['invalid_hash_message']);
      }
      if (!empty($node->cmrf_retrieve_default_values['invalid_hash_redirect'])) {
        drupal_goto($node->cmrf_retrieve_default_values['invalid_hash_redirect']);
      }
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function cmrf_webform_node_insert($node) {
  if (in_array($node->type, webform_node_types())) {
    db_insert('cmrf_webforms')
      ->fields(array(
        'nid' => $node->nid,
        'cmrf_enable' => !empty($node->cmrf_enable) ? 1 : 0,
        'cmrf_queue' => !empty($node->cmrf_queue) ? 1 : 0,
        'cmrf_clear_submission' => !empty($node->cmrf_clear_submission) ? 1: 0,
        'cmrf_profile' => !empty($node->cmrf_profile) ? $node->cmrf_profile : '',
        'cmrf_entity' => !empty($node->cmrf_entity) ? $node->cmrf_entity : '',
        'cmrf_action' => !empty($node->cmrf_action) ? $node->cmrf_action : '',
        'cmrf_parameters' => !empty($node->cmrf_parameters) ? serialize($node->cmrf_parameters) : serialize(array()),
        'cmrf_retrieve_default_values_enable' => !empty($node->cmrf_retrieve_default_values['enable']) ? 1 : 0,
        'cmrf_retrieve_default_values_entity' => !empty($node->cmrf_retrieve_default_values['entity']) ? $node->cmrf_retrieve_default_values['entity'] : NULL,
        'cmrf_retrieve_default_values_action' => !empty($node->cmrf_retrieve_default_values['action']) ? $node->cmrf_retrieve_default_values['action'] : NULL,
        'cmrf_retrieve_default_values_parameters' => !empty($node->cmrf_retrieve_default_values['parameters']) ? $node->cmrf_retrieve_default_values['parameters'] : NULL,
        'cmrf_retrieve_default_values_options' => !empty($node->cmrf_retrieve_default_values['options']) ? $node->cmrf_retrieve_default_values['options'] : NULL,
        'cmrf_retrieve_default_values_invalid_hash_message' => !empty($node->cmrf_retrieve_default_values['invalid_hash_message']) ? $node->cmrf_retrieve_default_values['invalid_hash_message'] : NULL,
        'cmrf_retrieve_default_values_invalid_hash_redirect' => !empty($node->cmrf_retrieve_default_values['invalid_hash_redirect']) ? $node->cmrf_retrieve_default_values['invalid_hash_redirect'] : NULL,
      ))
      ->execute();
  }
}

/**
 * Implements hook_node_update().
 */
function cmrf_webform_node_update($node) {
  if (in_array($node->type, webform_node_types())) {
    db_merge('cmrf_webforms')
      ->key(array(
        'nid' => $node->nid,
      ))
      ->fields(array(
        'cmrf_enable' => !empty($node->cmrf_enable) ? 1 : 0,
        'cmrf_queue' => !empty($node->cmrf_queue) ? 1 : 0,
        'cmrf_clear_submission' => !empty($node->cmrf_clear_submission) ? 1: 0,
        'cmrf_profile' => !empty($node->cmrf_profile) ? $node->cmrf_profile : '',
        'cmrf_entity' => !empty($node->cmrf_entity) ? $node->cmrf_entity : '',
        'cmrf_action' => !empty($node->cmrf_action) ? $node->cmrf_action : '',
        'cmrf_parameters' => !empty($node->cmrf_parameters) ? serialize($node->cmrf_parameters) : serialize(array()),
        'cmrf_retrieve_default_values_enable' => !empty($node->cmrf_retrieve_default_values['enable']) ? 1 : 0,
        'cmrf_retrieve_default_values_entity' => !empty($node->cmrf_retrieve_default_values['entity']) ? $node->cmrf_retrieve_default_values['entity'] : NULL,
        'cmrf_retrieve_default_values_action' => !empty($node->cmrf_retrieve_default_values['action']) ? $node->cmrf_retrieve_default_values['action'] : NULL,
        'cmrf_retrieve_default_values_parameters' => !empty($node->cmrf_retrieve_default_values['parameters']) ? $node->cmrf_retrieve_default_values['parameters'] : NULL,
        'cmrf_retrieve_default_values_options' => !empty($node->cmrf_retrieve_default_values['options']) ? $node->cmrf_retrieve_default_values['options'] : NULL,
        'cmrf_retrieve_default_values_invalid_hash_message' => !empty($node->cmrf_retrieve_default_values['invalid_hash_message']) ? $node->cmrf_retrieve_default_values['invalid_hash_message'] : NULL,
        'cmrf_retrieve_default_values_invalid_hash_redirect' => !empty($node->cmrf_retrieve_default_values['invalid_hash_redirect']) ? $node->cmrf_retrieve_default_values['invalid_hash_redirect'] : NULL,
      ))
      ->execute();
  }
}

/**
 * Implements hook_node_delete().
 */
function cmrf_webform_node_delete($node) {
  db_delete('cmrf_webforms')
    ->condition('nid', $node->nid)
    ->execute();
}
