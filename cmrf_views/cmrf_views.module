<?php

/**
 * Implements hook_views_api().
 */
function cmrf_views_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'cmrf_views'),
  );
}

function cmrf_views_sendCall($entity, $action, $parameters, $options, $profile='') {
  $connector_name = cmrf_views_get_connector_name($profile);
  $core = cmrf_core_get_core();
  $connector_id = variable_get($connector_name);
  if (empty($connector_id)) {
    $connector_id = $core->registerConnector($connector_name, $profile);
    variable_set($connector_name, $connector_id);
  }
  $call = $core->createCall($connector_id, $entity, $action, $parameters, $options);
  $core->executeCall($call);
  return $call;
}

function cmrf_views_get_connector_name($profile) {
  return 'cmrf_views:'.$profile.':';
}

function cmrf_views_menu() {
  $items = array();
  $items['admin/config/civimrf/views'] = array(
    'title' => 'CiviMRF Datasets for Views',
    'description' => 'Edit the datasets available in views.',
    'page callback' => 'cmrf_views_admin_list_datasets',
    'access arguments' => array('administer cmrf'),
    'file' => 'cmrf_views.admin.inc',
    'weight' => 0,
  );
  $items['admin/config/civimrf/views/add-dataset'] = array(
    'title' => 'Add dataset',
    'description' => 'Add a new dataset for Views.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cmrf_views_dataset_form'),
    'access arguments' => array('administer cmrf'),
    'type' => MENU_LOCAL_ACTION,
    'weight' => 2,
    'file' => 'cmrf_views.admin.inc',
  );
  $items['admin/config/civimrf/views/edit-dataset/%cmrf_views_dataset'] = array(
    'title' => 'Edit dataset',
    'description' => 'Edit a CiviMRF dataset for Views.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cmrf_views_dataset_form', 5),
    'access arguments' => array('administer cmrf'),
    'file' => 'cmrf_views.admin.inc',
  );
  $items['admin/config/civimrf/views/delete-dataset/%cmrf_views_dataset'] = array(
    'title' => 'Delete dataset',
    'description' => 'Delete a CiviMRF dataset for Views.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cmrf_views_dataset_delete_form', 5),
    'access arguments' => array('administer cmrf'),
    'file' => 'cmrf_views.admin.inc',
  );
  $items['admin/config/civimrf/views/update_entity_list'] = array(
    'title' => 'CiviMRF Views Update Entity List',
    'description' => 'Update the list with enabled entities in views.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crmf_views_update_entity_list_form'),
    'access arguments' => array('administer cmrf'),
    'file' => 'cmrf_views.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function cmrf_views_theme() {
  return array(
    // Theme functions in cmrf_views.admin.inc.
    'cmrf_views_list_datasets' => array(
      'variables' => array('datasets' => NULL),
    ),
  );
}

/**
 * Retrieve a list of entities available for Drupal Views.
 * 
 * This function caches the result as the definition are build upon requesting the data
 * from the remote civicrm installation. 
 * 
 * When $reset is TRUE then the cache is ignored and new values are stored in the cache.
 * 
 * Returns the data in the format for the hook_views_data.
 * 
 * @param bool $reset
 *   Whether the cache should reset.
 * @return array
 *   In format which could be used by the hook_views_data.  
 */
function cmrf_views_entity_list($reset=FALSE) {
  $data = array();
  
  $strData = variable_get('cmrf_views_entities');
  if (!empty($strData)) {
    $data = json_decode($strData, true);
    if (!is_array($data)) {
      $data = array();
      $reset = TRUE;
    }
  } else {
    $reset = TRUE;
  }
  
  if ($reset) {
    $data = array();
    $entities = cmrf_views_default_entity_list();
    drupal_alter('cmrf_views_entity_list', $entities);
    foreach($entities as $entity_name => $entity_definition) {
      $fields = _cmrf_views_civicrm_fields($entity_definition['entity'], $entity_definition['action']);
      if (count($fields)) {
        $entity_definition['params'] = isset($entity_definition['params']) ? $entity_definition['params'] : '';
        $data['cmrf:'.$entity_definition['profile'].'_'.$entity_name] = $fields;
        $data['cmrf:'.$entity_definition['profile'].'_'.$entity_name]['table']['group'] = $entity_definition['label'];
        $data['cmrf:'.$entity_definition['profile'].'_'.$entity_name]['table']['base'] = array(
          'field' => 'id',
          'title' => $entity_definition['label'],
          'query class' => 'cmrf_views',
          'entity' => $entity_definition['entity'],
          'action' => $entity_definition['action'],
          'count' => $entity_definition['count'],
          'profile' => $entity_definition['profile'],
          'params' => json_encode($entity_definition['params']),
        );
      }
    }
    variable_set('cmrf_views_entities', json_encode($data));
  }
  return $data;
}

/**
 * Default list of CiviCRM entities which should be exposed to drupal views.
 */
function cmrf_views_default_entity_list() {
  $datasets = db_select('cmrf_views_dataset', NULL, array('fetch' => PDO::FETCH_ASSOC))
    ->fields('cmrf_views_dataset')
    ->orderBy('name')
    ->execute()
    ->fetchAllAssoc('id', PDO::FETCH_ASSOC);

  $entity_list = array();
  foreach($datasets as $dataset) {
    $params = json_decode($dataset['params'], true);
    if (!is_array($params)) {
      $params = array();
    }
    $entity_list[$dataset['name']] = array(
      'label' => $dataset['title'],
      'entity' => $dataset['entity'],
      'action' => $dataset['action'],
      'count' => $dataset['getcount'],
      'params' => $params,
      'profile' => $dataset['profile'],
    );
  }
  return $entity_list;
}

/**
 * Retrieve all the fields for an entity in the formal of Drupal views.
 */
function _cmrf_views_civicrm_fields($api_entity, $api_action) {
  $return = array();
  $parameters = array(
    'api_action' => $api_action
  );
  $options['limit'] = 0;
  $call = cmrf_views_sendCall($api_entity, 'getfields', $parameters, $options);
  if ($call->getStatus() != \CMRF\Core\Call::STATUS_DONE) {
    return;
  }
  $fields = $call->getReply();
  if (isset($fields['values']) && is_array($fields['values'])) {
    foreach($fields['values'] as $field_name => $field) {
      $fieldOtions = false; 
      $filterField = true;
      $returnField = true;
      if (isset($field['api.filter'])) {
        $filterField = $field['api.filter'] ? true : false;
      }
      if (isset($field['api.return'])) {
        $returnField = $field['api.return'] ? true : false;
      }
      
      // Check whether this field is a select field (such as event_type_id)
      if (isset($field["pseudoconstant"]) || isset($field['options']) && is_array($field['options'])) {
        $fieldOtions = cmrf_views_fetch_options($api_entity,$api_action, $field_name);
      }
      
      if (!isset($field['type'])) {
        $field['type'] = 0; // Set to 0 so we assign a default handler
      }
      $return[$field_name]['title'] = $field['title'];
      if (isset($field['description'])) {
        $return[$field_name]['help'] = $field['description'];
      }
      $return[$field_name]['field']['click sortable'] = true;
      switch ($field['type']) {
        case 1: // Integer
          $return[$field_name]['field']['handler'] = 'cmrf_views_handler_field_numeric';
          $return[$field_name]['sort']['handler'] = 'views_handler_sort';
          if (!empty($fieldOtions)) {
            $return[$field_name]['field']['options'] = $fieldOtions;  
          }
          if (!empty($fieldOtions) && $filterField) {
            $return[$field_name]['filter']['handler'] = 'cmrf_views_handler_filter_in_operator';
            $return[$field_name]['filter']['options'] = $fieldOtions;
          } elseif ($filterField) {
            $return[$field_name]['filter']['handler'] = 'views_handler_filter_numeric';
          }
          $return[$field_name]['argument']['handler'] = 'views_handler_numeric';
          break;
        case 4: // Date field
        case 12: // Date and time field
        case 256: // Timestamp field
          $return[$field_name]['field']['handler'] = 'cmrf_views_handler_field_date';
          $return[$field_name]['sort']['handler'] = 'views_handler_sort';
          if (!empty($fieldOtions) && $filterField) {
            $return[$field_name]['filter']['handler'] = 'cmrf_views_handler_filter_in_operator';
            $return[$field_name]['filter']['options'] = $fieldOtions;
          } elseif ($filterField) {
            $return[$field_name]['filter']['handler'] = 'views_handler_filter_date';
          }
          $return[$field_name]['argument']['handler'] = 'views_handler_argument_date';
          break;
        case 16: // Boolean
          $return[$field_name]['field']['handler'] = 'views_handler_field_boolean';
          $return[$field_name]['sort']['handler'] = 'views_handler_sort';
          if ($filterField) {
            $return[$field_name]['filter']['handler'] = 'views_handler_filter_boolean_operator';
            $return[$field_name]['filter']['use equal'] = TRUE;
          }
          $return[$field_name]['argument']['handler'] = 'views_handler_argument';
          break;  
        case 32: // Text and Long Text
          $return[$field_name]['field']['handler'] = 'cmrf_views_handler_field_markup';
          $return[$field_name]['sort']['handler'] = 'views_handler_sort';
          if (!empty($fieldOtions)) {
            $return[$field_name]['field']['options'] = $fieldOtions;
          }
          if (!empty($fieldOtions) && $filterField) {
            $return[$field_name]['filter']['handler'] = 'cmrf_views_handler_filter_in_operator';
            $return[$field_name]['filter']['options'] = $fieldOtions;
          } elseif ($filterField) {
            $return[$field_name]['filter']['handler'] = 'views_handler_filter';
          }
          $return[$field_name]['argument']['handler'] = 'views_handler_argument';
          break; 
        default:
          $return[$field_name]['field']['handler'] = 'cmrf_views_handler_field';
          $return[$field_name]['sort']['handler'] = 'views_handler_sort';
          if (!empty($fieldOtions)) {
            $return[$field_name]['field']['options'] = $fieldOtions;  
          }
          if (!empty($fieldOtions) && $filterField) {
            $return[$field_name]['filter']['handler'] = 'cmrf_views_handler_filter_in_operator';
            $return[$field_name]['filter']['options'] = $fieldOtions;
          } elseif ($filterField) {
            $return[$field_name]['filter']['handler'] = 'views_handler_filter';
          }
          $return[$field_name]['argument']['handler'] = 'views_handler_argument';
          break;    
      }
    }
  }
  return $return;
}

function cmrf_views_fetch_options($api_entity, $api_action, $field_name) {
  $params = array('field' => $field_name);
  $options['limit'] = 0;
  $options['cache'] = '5 minutes';
  $call = cmrf_views_sendCall($api_entity, 'getoptions', $params, $options);
  if ($call->getStatus() == \CMRF\Core\Call::STATUS_DONE) {
    $optionResult = $call->getReply(); 
    if (isset($optionResult['values']) && is_array($optionResult['values'])) {
      return $optionResult['values'];
    }
  }
  $parameters = array(
    'api_action' => $api_action
  );
  $options['limit'] = 0;
  $call = cmrf_views_sendCall($api_entity, 'getfields', $parameters, $options);
  if ($call->getStatus() == \CMRF\Core\Call::STATUS_DONE) {
    $fields = $call->getReply();
    if (isset($fields['values']) && is_array($fields['values']) && isset($fields['values'][$field_name]) && isset($fields['values'][$field_name]['options']) && is_array($fields['values'][$field_name]['options'])) {
        return $fields['values'][$field_name]['options'];
    }
  }
  return array();
}

/**
 * Saves a CiviMRF views dataset.
 *
 * @param array $dataset
 *   A dataset containing:
 *   - id: of the dataset
 *   - title: 'A title for the dataset'
 *   - name: A unique name for the dataset (required).
 *   - profile: the cmrf profile to use
 *   - entity: the api entity
 *   - action: the api action
 *   - params: the api params; String in json format.
 *
 * @return array
 *   A profile array containing:
 *   - id: the id of the dataset
 *   - name: A unique name for the dataset.
 *   - title: A title.
 *   - profile: the CMRF profile to use
 *   - entity: the api entity
 *   - action: the api action
 *   - params: the api parameters
 *   - is_new: TRUE if this is a new dataset, and FALSE if it is an existing
 *     dataset.
 */
function cmrf_views_dataset_save($dataset) {
  if (isset($dataset['id']) && is_numeric($dataset['id'])) {
    // Load the existing style to make sure we account for renamed styles.
    drupal_write_record('cmrf_views_dataset', $dataset, 'id');
    $dataset['is_new'] = FALSE;
  }
  else {
    // Add a default label when not given.
    if (empty($dataset['title'])) {
      $dataset['title'] = $dataset['name'];
    }
    drupal_write_record('cmrf_views_dataset', $dataset);
    $dataset['is_new'] = TRUE;
  }

  // Let other modules update as necessary on save.
  module_invoke_all('cmrf_views_dataset_save', $dataset);

  return $dataset;
}

/**
 * Deletes a CiviMRF views dataset
 *
 * @param $dataset
 *   The dataset.
 * @return
 *   TRUE on success.
 */
function cmrf_views_dataset_delete($dataset) {
  if (isset($dataset['id']) && !empty($dataset['id'])) {
    db_delete('cmrf_views_dataset')
      ->condition('id', $dataset['id'])
      ->execute();
  }

  module_invoke_all('cmrf_views_dataset_delete', $dataset);

  return TRUE;
}

/**
 * Loads a views dataset
 *
 * @param $id int|string
 *   The id or the name of the dataset.
 * @return array|FALSE
 *   A dataset array.
 *   If the dataset name is not valid, an FALSE is returned.
 */
function cmrf_views_dataset_load($id) {
  if (is_numeric($id)) {
    $dataset = db_select('cmrf_views_dataset', NULL, ['fetch' => PDO::FETCH_ASSOC])
      ->fields('cmrf_views_dataset')
      ->condition('id', $id)
      ->execute()
      ->fetchAssoc();
    if ($dataset) {
      return $dataset;
    }
  } else {
    $dataset = db_select('cmrf_views_dataset', NULL, ['fetch' => PDO::FETCH_ASSOC])
      ->fields('cmrf_views_dataset')
      ->condition('name', $id)
      ->execute()
      ->fetchAssoc();
    if ($dataset) {
      return $dataset;
    }
  }

  // Otherwise the style was not found.
  return FALSE;
}
