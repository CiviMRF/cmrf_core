<?php

/**
 * Implements hook_views_api().
 */
function cmrf_views_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'cmrf_views'),
  );
}

function cmrf_views_sendCall($entity, $action, $parameters, $options, $profile='') {
  $connector_name = cmrf_views_get_connector_name($profile);
  $core = cmrf_core_get_core();
  $connector_id = variable_get($connector_name);
  if (empty($connector_id)) {
    $connector_id = $core->registerConnector($connector_name, $profile);
    variable_set($connector_name, $connector_id);
  }
  $call = $core->createCall($connector_id, $entity, $action, $parameters, $options);
  $core->executeCall($call);
  return $call;
}

function cmrf_views_get_connector_name($profile) {
  return 'cmrf_views:'.$profile.':';
}

function cmrf_views_menu() {
  $items = array();
  $items['admin/config/civimrf/views_update_entity_list'] = array(
    'title' => 'CiviMRF Views Update Entity List',
    'description' => 'Update the list with enabled entities in views.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('crmf_views_update_entity_list_form'),
    'access arguments' => array('administer cmrf'),
    'file' => 'cmrf_views.admin.inc',
    'weight' => 0,
  );
  return $items;
}

/**
 * Retrieve a list of entities available for Drupal Views.
 * 
 * This function caches the result as the definition are build upon requesting the data
 * from the remote civicrm installation. 
 * 
 * When $reset is TRUE then the cache is ignored and new values are stored in the cache.
 * 
 * Returns the data in the format for the hook_views_data.
 * 
 * @param bool $reset
 *   Whether the cache should reset.
 * @return array
 *   In format which could be used by the hook_views_data.  
 */
function cmrf_views_entity_list($reset=FALSE) {
  $data = array();
  
  $strData = variable_get('cmrf_views_entities');
  if (!empty($strData)) {
    $data = json_decode($strData, true);
    if (!is_array($data)) {
      $data = array();
      $reset = TRUE;
    }
  } else {
    $reset = TRUE;
  }
  
  if ($reset) {
    $data = array();
    $profiles = cmrf_core_list_profiles();
    foreach($profiles as $profile) {
      $entities = cmrf_views_default_entity_list($profile);
      drupal_alter('cmrf_views_entity_list', $entities, $profile);
      
      foreach($entities as $entity_name => $entity_definition) {
        $fields = _cmrf_views_civicrm_fields($entity_definition['entity'], $entity_definition['action']);
        if (count($fields)) {
          $data['cmrf:'.$profile['name'].'_'.$entity_name] = $fields;
          $data['cmrf:'.$profile['name'].'_'.$entity_name]['table']['group'] = $entity_definition['label']; 
          $data['cmrf:'.$profile['name'].'_'.$entity_name]['table']['base'] = array(
            'field' => 'id',
            'title' => $entity_definition['label'],
            'query class' => 'cmrf_views',
            'entity' => $entity_definition['entity'],
            'action' => $entity_definition['action'],
            'count' => $entity_definition['count'],
            'profile' => $profile['name'],
          );
        }
      }
    }
    variable_set('cmrf_views_entities', json_encode($data));
  }
  return $data;
}

/**
 * Default list of CiviCRM entities which should be exposed to drupal views.
 */
function cmrf_views_default_entity_list($profile) {
  $entities = array(
    'Activity',
    'ActivityContact',
    'ActivityType',
    'Address',
    'Campaign',
    'Case',
    'CaseContact',
    'CaseType',
    'Contact',
    'Contribution',
    'Email',
    'Event',
    'Grant',
    'Group',
    'GroupContact',
    'Im',
    'Membership',
    'MembershipPayment',
    'MembershipStatus',
    'MembershipType',
    'Note',
    'OpenID',
    'Participant',
    'ParticipantPayment',
    'ParticipantStatusType',
    'Phone',
    'Pledge',
    'PledgePayment',
    'Relationship',
    'RelationshipType',
    'Website',    
  );
  
  $entity_list = array();
  foreach($entities as $entity) {
    $label = $profile['label'].': '.$entity;
    $entity_list[$entity] = array(
      'label' => $label,
      'entity' => $entity,
      'action' => 'get',
      'count' => 'getcount',
    );
  }
  return $entity_list;
}

/**
 * Retrieve all the fields for an entity in the formal of Drupal views.
 */
function _cmrf_views_civicrm_fields($api_entity, $api_action) {
  $return = array();
  $parameters = array(
    'api_action' => $api_action
  );
  $options['limit'] = 0;
  $call = cmrf_views_sendCall($api_entity, 'getfields', $parameters, $options);
  if ($call->getStatus() != \CMRF\Core\Call::STATUS_DONE) {
    return;
  }
  $fields = $call->getReply();
  if (isset($fields['values']) && is_array($fields['values'])) {
    foreach($fields['values'] as $field_name => $field) {
      $fieldOtions = false; 
      
      // Check whether this field is a select field (such as event_type_id)
      if (isset($field["pseudoconstant"])) {
        $optionsParameter = array('field' => $field_name);
        $optionsOptions['limit'] = 0;
        $call = cmrf_views_sendCall($api_entity, 'getoptions', $optionsParameter, $options);
        if ($call->getStatus() == \CMRF\Core\Call::STATUS_DONE) {
          $options = $call->getReply(); 
          if ($options && is_array($options['values'])) {
            $fieldOtions = $options['values'];
          }
        } 
      }
      
      if (!isset($field['type'])) {
        $field['type'] = 0; // Set to 0 so we assign a default handler
      }
      $return[$field_name]['title'] = $field['title'];
      if (isset($field['description'])) {
        $return[$field_name]['help'] = $field['description'];
      }
      $return[$field_name]['field']['click sortable'] = true;
      switch ($field['type']) {
        case 1: // Integer
          $return[$field_name]['field']['handler'] = 'views_handler_field_numeric';
          $return[$field_name]['sort']['handler'] = 'views_handler_sort';
          if (!empty($fieldOtions)) {
            $return[$field_name]['filter']['handler'] = 'cmrf_views_handler_filter_in_operator';
            $return[$field_name]['filter']['options'] = $fieldOtions;
          } else {
            $return[$field_name]['filter']['handler'] = 'views_handler_filter_numeric';
          }
          $return[$field_name]['argument']['handler'] = 'views_handler_numeric';
          break;
        case 12: // Date and time field
          $return[$field_name]['field']['handler'] = 'cmrf_views_handler_field_date';
          $return[$field_name]['sort']['handler'] = 'views_handler_sort';
          if (!empty($fieldOtions)) {
            $return[$field_name]['filter']['handler'] = 'cmrf_views_handler_filter_in_operator';
            $return[$field_name]['filter']['options'] = $fieldOtions;
          } else {
            $return[$field_name]['filter']['handler'] = 'views_handler_filter_date';
          }
          $return[$field_name]['argument']['handler'] = 'views_handler_argument_date';
          break;
        case 16: // Boolean
          $return[$field_name]['field']['handler'] = 'views_handler_field_boolean';
          $return[$field_name]['sort']['handler'] = 'views_handler_sort';
          $return[$field_name]['filter']['handler'] = 'views_handler_filter_boolean_operator';
          $return[$field_name]['filter']['use equal'] = TRUE;
          $return[$field_name]['argument']['handler'] = 'views_handler_argument';
          break;  
        case 32: // Text and Long Text
          $return[$field_name]['field']['handler'] = 'cmrf_views_handler_field_markup';
          $return[$field_name]['sort']['handler'] = 'views_handler_sort';
          if (!empty($fieldOtions)) {
            $return[$field_name]['filter']['handler'] = 'cmrf_views_handler_filter_in_operator';
            $return[$field_name]['filter']['options'] = $fieldOtions;
          } else {
            $return[$field_name]['filter']['handler'] = 'views_handler_filter';
          }
          $return[$field_name]['argument']['handler'] = 'views_handler_argument';
          break; 
        default:
          $return[$field_name]['field']['handler'] = 'views_handler_field';
          $return[$field_name]['sort']['handler'] = 'views_handler_sort';
          if (!empty($fieldOtions)) {
            $return[$field_name]['filter']['handler'] = 'cmrf_views_handler_filter_in_operator';
            $return[$field_name]['filter']['options'] = $fieldOtions;
          } else {
            $return[$field_name]['filter']['handler'] = 'views_handler_filter';
          }
          $return[$field_name]['argument']['handler'] = 'views_handler_argument';
          break;    
      }
    }
  }
  return $return;
}